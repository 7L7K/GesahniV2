from fastapi import APIRouter, Request, Response, Depends

router = APIRouter()

from .auth import dev_token, dev_login, make_dev_token  # lightweight dev helpers
from .deps.user import get_current_user_id


@router.post("/auth/dev/login")
async def dev_login_route(body: dict, request: Request, response: Response):
    return await dev_login(body, request, response)


@router.post("/auth/token")
async def dev_token_route(body: dict, user_id: str = Depends(get_current_user_id)):
    # Issue a dev token (only enabled in dev via environment guards in implementation)
    return await make_dev_token(body, user_id)

from fastapi import APIRouter, Depends, Request

router = APIRouter()

from .auth import list_pats as _list_pats_impl
from .auth import create_pat as _create_pat_impl
from .auth import _get_pat_by_id as _get_pat_by_id_impl
from .auth import revoke_pat as _revoke_pat_impl
from .deps.user import get_current_user_id


@router.get("/pats")
async def list_pats(user_id: str = Depends(get_current_user_id)):
    return await _list_pats_impl(user_id)


@router.post("/pats")
async def create_pat(body: dict, user_id: str = Depends(get_current_user_id)):
    return await _create_pat_impl(body, user_id)


@router.delete("/pats/{pat_id}")
async def revoke_pat(pat_id: str, user_id: str = Depends(get_current_user_id)):
    return await _revoke_pat_impl(pat_id, user_id)

from fastapi import APIRouter, Depends, Request, Response

router = APIRouter()

from .auth import refresh as _refresh_impl


@router.post("/auth/refresh")
async def refresh(request: Request, response: Response):
    # Delegate to existing parity implementation in app.api.auth
    return await _refresh_impl(request, response)

from fastapi import APIRouter, Depends, Request, Response

router = APIRouter()

# Delegate to existing implementation in app.api.auth to keep logic centralized.
from .auth import whoami as _whoami_impl
from .auth import finish_clerk_login as _finish_impl
from .auth import _require_user_or_dev as _require_user_or_dev


@router.get("/whoami")
async def whoami(request: Request):
    return await _whoami_impl(request)


@router.get("/auth/finish")
@router.post("/auth/finish")
async def finish(request: Request, response: Response, user_id: str = Depends(_require_user_or_dev)):
    # Delegate to canonical implementation which handles dependencies and CSRF
    return await _finish_impl(request, response, user_id=user_id)
