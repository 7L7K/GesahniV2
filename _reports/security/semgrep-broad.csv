"WARNING","python.lang.security.deserialization.pickle.avoid-pickle","app/api/oauth_store.py",43,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
"WARNING","python.lang.security.deserialization.pickle.avoid-pickle","app/api/oauth_store.py",56,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
"WARNING","python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","app/integrations/google/routes.py",91,"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'."
"WARNING","python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1","app/router/state.py",134,"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
"WARNING","python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","app/security.py",825,"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'."
"WARNING","python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","app/security.py",1895,"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'."
"ERROR","python.lang.security.use-defused-xml.use-defused-xml","app/skills/news_skill.py",5,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
"WARNING","python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1","app/tts_orchestrator.py",200,"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
"WARNING","python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","app/url_helpers.py",144,"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'."
"WARNING","python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument","debug_auth.py",125,"Hardcoded password is used as a default argument to 'run_full_test'. This could be dangerous if a real password is not supplied."
"WARNING","python.lang.security.audit.exec-detected.exec-detected","debug_spotify.py",29,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
"ERROR","generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token","docs/domains/google.md",253,"Google OAuth Access Token detected"
"ERROR","generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token","docs/domains/google.md",265,"Google OAuth Access Token detected"
"ERROR","generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token","scripts/diagnose_oauth_flow.py",71,"Google OAuth Access Token detected"
"WARNING","javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect","security/fixtures/open-redirect-vulnerable.js",10,"It looks like 'url' is read from user input and it is used to as a redirect. Ensure 'url' is not externally controlled, otherwise this is an open redirect."
"WARNING","javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect","security/fixtures/open-redirect-vulnerable.js",30,"It looks like 'domain' is read from user input and it is used to as a redirect. Ensure 'domain' is not externally controlled, otherwise this is an open redirect."
"WARNING","javascript.express.security.audit.xss.direct-response-write.direct-response-write","security/fixtures/open-redirect-vulnerable.js",44,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
"WARNING","javascript.express.security.audit.xss.direct-response-write.direct-response-write","security/fixtures/open-redirect-vulnerable.js",56,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
"WARNING","javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect","security/fixtures/open-redirect-vulnerable.js",76,"It looks like 'redirectUrl' is read from user input and it is used to as a redirect. Ensure 'redirectUrl' is not externally controlled, otherwise this is an open redirect."
"ERROR","python.flask.security.open-redirect.open-redirect","security/fixtures/open-redirect-vulnerable.py",14,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
"ERROR","python.flask.security.open-redirect.open-redirect","security/fixtures/open-redirect-vulnerable.py",33,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
"ERROR","python.flask.security.open-redirect.open-redirect","security/fixtures/open-redirect-vulnerable.py",39,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
"ERROR","python.flask.security.open-redirect.open-redirect","security/fixtures/open-redirect-vulnerable.py",75,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
"WARNING","python.flask.security.audit.debug-enabled.debug-enabled","security/fixtures/open-redirect-vulnerable.py",81,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
"WARNING","python.lang.security.audit.exec-detected.exec-detected","spotify_debugger.py",195,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
"ERROR","generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token","test_enhanced_logging.py",27,"Google OAuth Access Token detected"
"ERROR","python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","test_idempotency_simple.py",11,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
"ERROR","generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token","test_oauth_fix.py",23,"Google OAuth Access Token detected"
"ERROR","generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token","test_oauth_success_flow.py",58,"Google OAuth Access Token detected"
"ERROR","generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token","test_user_data_saving.py",99,"Google OAuth Access Token detected"
