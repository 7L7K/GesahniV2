name: CI Phase 4 - Database & Migrations

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  database-migrations:
    name: "Database Migrations 01→02→03"
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app_pw
          POSTGRES_DB: gesahni
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install alembic psycopg2-binary sqlalchemy

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready!"

    - name: Set DATABASE_URL
      run: echo "DATABASE_URL=postgresql://app:app_pw@localhost:5432/gesahni" >> $GITHUB_ENV

    - name: Verify database connection
      run: |
        psql $DATABASE_URL -c "SELECT version();"

    - name: Check migration status before upgrade
      run: |
        echo "🔍 Checking current migration status..."
        alembic current

    - name: Run migrations 01→02→03
      run: |
        echo "🔄 Running migrations in sequence..."
        alembic upgrade 0001_bootstrap
        echo "✅ Migration 0001_bootstrap completed"
        alembic upgrade 0002_phase2
        echo "✅ Migration 0002_phase2 completed"
        alembic upgrade 0003_phase3_postgres_only
        echo "✅ Migration 0003_phase3_postgres_only completed"

    - name: Verify final migration state
      run: |
        echo "🔍 Verifying final migration state..."
        alembic current
        alembic history

    - name: Check for pending heads (should be clean)
      run: |
        echo "🔍 Checking for pending migration heads..."
        # This will fail if there are unapplied migrations
        if alembic heads | grep -q "head"; then
          echo "❌ Found pending migration heads!"
          alembic heads
          exit 1
        else
          echo "✅ No pending migration heads found"
        fi

    - name: Validate schema integrity
      run: |
        echo "🔍 Validating schema integrity..."
        # Check that all expected schemas exist
        psql $DATABASE_URL -c "
        SELECT nspname as schema_name
        FROM pg_namespace
        WHERE nspname IN ('auth','users','care','music','tokens','audit','storage','chat')
        ORDER BY 1;" | grep -E "(auth|users|care|music|tokens|audit|storage|chat)" | wc -l | grep -q "8"

        if [ $? -eq 0 ]; then
          echo "✅ All 8 required schemas exist"
        else
          echo "❌ Missing required schemas"
          psql $DATABASE_URL -c "
          SELECT nspname as schema_name
          FROM pg_namespace
          WHERE nspname IN ('auth','users','care','music','tokens','audit','storage','chat')
          ORDER BY 1;"
          exit 1
        fi

    - name: Test database connectivity
      run: |
        echo "🔍 Testing database connectivity..."
        python -c "
        from app.db.core import sync_engine
        with sync_engine.connect() as conn:
            result = conn.execute('SELECT 1 as test')
            print('✅ Database connectivity test passed')
        "

  sqlite-scan:
    name: "SQLite Scan - App Directory"
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Run SQLite scan on app/ directory
      run: |
        echo "🔍 Scanning app/ directory for SQLite usage..."
        python scripts/check_no_sqlite.py

    - name: Verify no SQLite files exist
      run: |
        echo "🔍 Checking for SQLite database files..."
        find . -name "*.db" -o -name "*.sqlite" -o -name "*.sqlite3" | grep -v "__pycache__" | grep -v "node_modules" || true
        SQLITE_FILES=$(find . -name "*.db" -o -name "*.sqlite" -o -name "*.sqlite3" | grep -v "__pycache__" | grep -v "node_modules" | wc -l)

        if [ "$SQLITE_FILES" -gt 0 ]; then
          echo "❌ Found SQLite database files:"
          find . -name "*.db" -o -name "*.sqlite" -o -name "*.sqlite3" | grep -v "__pycache__" | grep -v "node_modules"
          exit 1
        else
          echo "✅ No SQLite database files found"
        fi

  database-health:
    name: "Database Health Check"
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app_pw
          POSTGRES_DB: gesahni
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install alembic psycopg2-binary sqlalchemy

    - name: Set DATABASE_URL
      run: echo "DATABASE_URL=postgresql://app:app_pw@localhost:5432/gesahni" >> $GITHUB_ENV

    - name: Run comprehensive database health check
      run: |
        echo "🚀 Running comprehensive database health check..."
        python scripts/ci_health_check.py

    - name: Verify Phase 3 migration applied
      run: |
        echo "🔍 Verifying Phase 3 migration was applied..."
        alembic current | grep -q "0003_phase3_postgres_only"
        if [ $? -eq 0 ]; then
          echo "✅ Phase 3 migration (0003_phase3_postgres_only) is applied"
        else
          echo "❌ Phase 3 migration not found in current state"
          alembic current
          exit 1
        fi

  integration-tests-postgres:
    name: "Integration Tests (PostgreSQL)"
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app_pw
          POSTGRES_DB: gesahni_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install alembic psycopg2-binary sqlalchemy pytest-asyncio

    - name: Set DATABASE_URL for tests
      run: echo "DATABASE_URL=postgresql://app:app_pw@localhost:5432/gesahni_test" >> $GITHUB_ENV

    - name: Run database migrations for tests
      run: |
        echo "🔄 Setting up test database..."
        alembic upgrade head

    - name: Run integration tests
      run: |
        echo "🧪 Running integration tests on PostgreSQL..."
        python -m pytest tests/integration/ -v --tb=short

    - name: Run database-related unit tests
      run: |
        echo "🧪 Running database-related unit tests..."
        python -m pytest tests/unit/ -k "db or database or storage" -v --tb=short
