{
  "openapi": "3.1.0",
  "info": {
    "title": "GesahniV2 API",
    "version": "v0.5.0-41-gd33726d"
  },
  "paths": {
    "/v1/capture/start": {
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Capture Start",
        "operationId": "capture_start_v1_capture_start_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/capture/save": {
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Capture Save",
        "operationId": "capture_save_v1_capture_save_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_capture_save_v1_capture_save_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/capture/tags": {
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Capture Tags",
        "operationId": "capture_tags_v1_capture_tags_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_capture_tags_v1_capture_tags_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/capture/status/{session_id}": {
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "Capture Status",
        "operationId": "capture_status_v1_capture_status__session_id__get",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/capture/sessions": {
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "List Sessions Capture",
        "operationId": "list_sessions_capture_v1_capture_sessions_get",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/search/sessions": {
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "Search Sessions",
        "operationId": "search_sessions_v1_search_sessions_get",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Q"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "recent",
              "title": "Sort"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sessions/{session_id}/transcribe": {
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Trigger Transcription Endpoint",
        "operationId": "trigger_transcription_endpoint_v1_sessions__session_id__transcribe_post",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sessions/{session_id}/summarize": {
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Trigger Summary Endpoint",
        "operationId": "trigger_summary_endpoint_v1_sessions__session_id__summarize_post",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/transcribe/{session_id}": {
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Start Transcription",
        "operationId": "start_transcription_v1_transcribe__session_id__post",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "Get Transcription",
        "operationId": "get_transcription_v1_transcribe__session_id__get",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ha/entities": {
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "Ha Entities",
        "operationId": "ha_entities_v1_ha_entities_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ]
      }
    },
    "/v1/ha/service": {
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Ha Service",
        "operationId": "ha_service_v1_ha_service_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAck"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ]
      }
    },
    "/v1/ha/webhook": {
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Ha Webhook",
        "operationId": "ha_webhook_v1_ha_webhook_post",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "parameters": [
          {
            "name": "x-signature",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Signature"
            }
          },
          {
            "name": "x-timestamp",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Timestamp"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookAck"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ha/resolve": {
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "Ha Resolve",
        "operationId": "ha_resolve_v1_ha_resolve_get",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ha/aliases": {
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "List Aliases",
        "operationId": "list_aliases_v1_ha_aliases_get",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Create Alias",
        "operationId": "create_alias_v1_ha_aliases_post",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AliasBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Care"
        ],
        "summary": "Delete Alias",
        "operationId": "delete_alias_v1_ha_aliases_delete",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/memories/export": {
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "Export Memories",
        "operationId": "export_memories_v1_memories_export_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/memories/{mem_id}": {
      "delete": {
        "tags": [
          "Care"
        ],
        "summary": "Delete Memory",
        "operationId": "delete_memory_v1_memories__mem_id__delete",
        "parameters": [
          {
            "name": "mem_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Mem Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/csrf": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get Csrf",
        "description": "Issuer endpoint for double-submit CSRF token.\n\nReturns JSON {\"csrf_token\": \"<token>\"} and sets a non-HttpOnly cookie\nvia the centralized cookie helper. Also stores token server-side for\nenhanced cross-site validation.",
        "operationId": "get_csrf_v1_csrf_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/debug/oauth/routes": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Debug Oauth Routes",
        "description": "List relevant OAuth/Google routes currently registered.\n\nMakes route visibility obvious during troubleshooting.",
        "operationId": "debug_oauth_routes_v1_debug_oauth_routes_get",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/debug/oauth/config": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Debug Oauth Config",
        "description": "Show effective Google OAuth environment/config in one place.",
        "operationId": "debug_oauth_config_v1_debug_oauth_config_get",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/intent-test": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "No-op intent echo",
        "operationId": "intent_test_v1_intent_test_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/client-crypto-policy": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Client Crypto Policy",
        "operationId": "client_crypto_policy_v1_client_crypto_policy_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Client Crypto Policy V1 Client Crypto Policy Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/explain_route": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Explain Route",
        "operationId": "explain_route_v1_explain_route_get",
        "parameters": [
          {
            "name": "req_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Req Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/diag/health/openai": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get Openai Health",
        "description": "Get detailed OpenAI health status with caching information.\n\nReturns:\n    Dictionary with OpenAI health status and metadata",
        "operationId": "get_openai_health_v1_diag_health_openai_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Openai Health V1 Diag Health Openai Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/diag/health/ollama": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get Ollama Health",
        "description": "Get detailed Ollama health status with caching information.\n\nReturns:\n    Dictionary with Ollama health status and metadata",
        "operationId": "get_ollama_health_v1_diag_health_ollama_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Ollama Health V1 Diag Health Ollama Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/diag/health/vector_store": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get Vector Store Health",
        "description": "Get detailed vector store health status.\n\nReturns:\n    Dictionary with vector store health status and metadata",
        "operationId": "get_vector_store_health_v1_diag_health_vector_store_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Vector Store Health V1 Diag Health Vector Store Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/diag/health/home_assistant": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get Home Assistant Health",
        "description": "Get detailed Home Assistant health status.\n\nReturns:\n    Dictionary with Home Assistant health status and metadata",
        "operationId": "get_home_assistant_health_v1_diag_health_home_assistant_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Home Assistant Health V1 Diag Health Home Assistant Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/diag/health/database": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get Database Health",
        "description": "Get detailed database health status.\n\nReturns:\n    Dictionary with database health status and metadata",
        "operationId": "get_database_health_v1_diag_health_database_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Database Health V1 Diag Health Database Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/diag/health/all": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get All Health Status",
        "description": "Get comprehensive health status for all components.\n\nReturns:\n    Dictionary with health status for all components",
        "operationId": "get_all_health_status_v1_diag_health_all_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get All Health Status V1 Diag Health All Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/diag/health/cache": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get Health Cache Info",
        "description": "Get information about the health check cache.\n\nReturns:\n    Dictionary with cache statistics and contents",
        "operationId": "get_health_cache_info_v1_diag_health_cache_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Health Cache Info V1 Diag Health Cache Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/diag/health/refresh": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Refresh Health Cache",
        "description": "Force refresh all cached health checks.\n\nReturns:\n    Dictionary with refresh status",
        "operationId": "refresh_health_cache_v1_diag_health_refresh_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Refresh Health Cache V1 Diag Health Refresh Post"
                }
              }
            }
          }
        }
      }
    },
    "/v1/diag/health/vendors": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get Vendor Health Status",
        "description": "Get health status for all vendors being tracked by the eager health gating system.\n\nReturns:\n    Dictionary with health information for all tracked vendors",
        "operationId": "get_vendor_health_status_v1_diag_health_vendors_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Vendor Health Status V1 Diag Health Vendors Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/logs": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Logs",
        "description": "Return recent error logs for the authenticated user.\n\nUses an in-process ring buffer populated by the logging configuration.",
        "operationId": "logs_v1_logs_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Logs V1 Logs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/health": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Health Combined",
        "description": "Unified health snapshot that always returns HTTP 200.\n\nShape: { status: 'ok'|'degraded'|'fail', checks: { backend, jwt, database, vector_store, llama, ha, qdrant, spotify } }",
        "operationId": "health_combined_v1_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/healthz": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Healthz",
        "description": "Report backend and LLaMA health for probes.",
        "operationId": "healthz_v1_healthz_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Healthz V1 Healthz Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      }
    },
    "/v1/rate_limit_status": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Rate Limit Status",
        "description": "Return current rate-limit backend configuration and health.",
        "operationId": "rate_limit_status_v1_rate_limit_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Rate Limit Status V1 Rate Limit Status Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      }
    },
    "/v1/config": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Config",
        "operationId": "config_v1_config_get",
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Config V1 Config Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/budget": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Budget Status",
        "operationId": "budget_status_v1_budget_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Budget Status V1 Budget Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      }
    },
    "/v1/status/budget": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Budget Status Alias",
        "operationId": "budget_status_alias_v1_status_budget_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Budget Status Alias V1 Status Budget Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      }
    },
    "/v1/ha_status": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Ha Status",
        "operationId": "ha_status_v1_ha_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Ha Status V1 Ha Status Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      }
    },
    "/v1/llama_status": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Llama Status",
        "description": "Report LLaMA health by attempting a minimal generation.",
        "operationId": "llama_status_v1_llama_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Llama Status V1 Llama Status Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      }
    },
    "/v1/status": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Full Status",
        "operationId": "full_status_v1_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Full Status V1 Status Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Health Simple",
        "description": "Boring, unbreakable health endpoint.\n\nAlways returns HTTP 200 with a minimal shape and short\u2011budget checks:\n{\"status\": \"ok|degraded\", \"services\": {\"api\": \"up\", \"llama\": \"up|down\", \"ha\": \"up|down\"}}",
        "operationId": "health_simple_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/healthz/ready": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Health Ready",
        "description": "Core readiness with structured component status.\n\nRequired checks (all must pass):\n- JWT secret present\n- DB/session store basic open\n- Vector store connectivity (read-only)\n\nEach component returns: healthy | degraded | unhealthy\nOverall status is unhealthy if any required component is unhealthy.\n\nAlways returns HTTP 200 - never 5xx. Degraded status is indicated in response body.",
        "operationId": "health_ready_healthz_ready_get",
        "responses": {
          "200": {
            "description": "Readiness status (always 200, never 5xx)",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "healthy": {
                    "summary": "All components healthy",
                    "value": {
                      "status": "ok",
                      "ok": true,
                      "components": {
                        "jwt_secret": {
                          "status": "healthy"
                        },
                        "db": {
                          "status": "healthy"
                        },
                        "vector_store": {
                          "status": "healthy"
                        }
                      }
                    }
                  },
                  "degraded": {
                    "summary": "Some components degraded",
                    "value": {
                      "status": "degraded",
                      "ok": true,
                      "components": {
                        "jwt_secret": {
                          "status": "healthy"
                        },
                        "db": {
                          "status": "healthy"
                        },
                        "vector_store": {
                          "status": "degraded"
                        }
                      }
                    }
                  },
                  "unhealthy": {
                    "summary": "Critical components unhealthy",
                    "value": {
                      "status": "unhealthy",
                      "ok": false,
                      "components": {
                        "jwt_secret": {
                          "status": "unhealthy"
                        },
                        "db": {
                          "status": "healthy"
                        },
                        "vector_store": {
                          "status": "healthy"
                        }
                      },
                      "failing": [
                        "jwt_secret"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/health/vector_store": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Health Vector Store",
        "description": "Return a small diagnostic summary for the configured vector store.\n\nIntended for automated smoke tests: returns `ok` + store_type + config\nand a minimal write/read smoke check when possible.",
        "operationId": "health_vector_store_v1_health_vector_store_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Health Vector Store V1 Health Vector Store Get"
                }
              }
            }
          }
        }
      }
    },
    "/health/vector_store": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Health Vector Store",
        "description": "Return a small diagnostic summary for the configured vector store.\n\nIntended for automated smoke tests: returns `ok` + store_type + config\nand a minimal write/read smoke check when possible.",
        "operationId": "health_vector_store_health_vector_store_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Health Vector Store Health Vector Store Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/health/qdrant": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Health Qdrant",
        "description": "Check Qdrant health status.",
        "operationId": "health_qdrant_v1_health_qdrant_get",
        "responses": {
          "200": {
            "description": "Qdrant health status",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Health Qdrant V1 Health Qdrant Get"
                },
                "examples": {
                  "healthy": {
                    "summary": "Qdrant is healthy",
                    "value": {
                      "ok": true,
                      "status": "ok"
                    }
                  },
                  "unhealthy": {
                    "summary": "Qdrant is not responding",
                    "value": {
                      "ok": false,
                      "status": "error",
                      "error": "Connection timeout"
                    }
                  },
                  "skipped": {
                    "summary": "Qdrant not configured",
                    "value": {
                      "ok": false,
                      "status": "skipped"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/health/chroma": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Health Chroma",
        "description": "Check Chroma health status.",
        "operationId": "health_chroma_v1_health_chroma_get",
        "responses": {
          "200": {
            "description": "Chroma health status",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Health Chroma V1 Health Chroma Get"
                },
                "examples": {
                  "healthy": {
                    "summary": "Chroma is healthy",
                    "value": {
                      "ok": true,
                      "status": "ok"
                    }
                  },
                  "unhealthy": {
                    "summary": "Chroma is not responding",
                    "value": {
                      "ok": false,
                      "status": "error",
                      "error": "Connection timeout"
                    }
                  },
                  "skipped": {
                    "summary": "Chroma not configured as vector store",
                    "value": {
                      "ok": false,
                      "status": "skipped"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/whoami": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Whoami",
        "description": "CANONICAL: Public whoami endpoint - the single source of truth for user identity.\n\nThis is the canonical whoami endpoint that should be used by all clients.\nReturns comprehensive authentication and session information including:\n\n- Authentication status and session readiness\n- User information (ID and email)\n- Authentication source (cookie, header, clerk, or missing)\n- API version for future compatibility\n\nResponse schema:\n{\n  \"is_authenticated\": bool,\n  \"session_ready\": bool,\n  \"user_id\": str | null,\n  \"user\": {\"id\": str | null, \"email\": str | null},\n  \"source\": \"cookie\" | \"header\" | \"clerk\" | \"missing\",\n  \"version\": 1\n}",
        "operationId": "whoami_v1_auth_whoami_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/auth/pats": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "List Pats",
        "description": "List all PATs for the authenticated user.\n\nReturns:\n    list[dict]: List of PATs with id, name, scopes, created_at, revoked_at (no tokens)",
        "operationId": "list_pats_v1_auth_pats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response List Pats V1 Auth Pats Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create Pat",
        "operationId": "create_pat_v1_auth_pats_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Body",
                "example": {
                  "name": "CI token",
                  "scopes": [
                    "admin:write"
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Create Pat V1 Auth Pats Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/pats/{pat_id}": {
      "delete": {
        "tags": [
          "Auth"
        ],
        "summary": "Revoke Pat",
        "description": "Revoke a PAT by setting revoked_at timestamp.\n\nArgs:\n    pat_id: The PAT ID to revoke\n\nReturns:\n    dict: Success confirmation",
        "operationId": "revoke_pat_v1_auth_pats__pat_id__delete",
        "parameters": [
          {
            "name": "pat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Pat Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Revoke Pat V1 Auth Pats  Pat Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/auth/finish": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Finish Clerk Login",
        "description": "Set auth cookies and finish login. Idempotent: safe to call multiple times.\n\nLocked contract: Always returns 204 for POST, 302 for GET.\nCSRF: Required for POST when CSRF_ENABLED=1 via X-CSRF-Token matching csrf_token cookie.",
        "operationId": "finish_clerk_login_v1_auth_auth_finish_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Finish Clerk Login",
        "description": "Set auth cookies and finish login. Idempotent: safe to call multiple times.\n\nLocked contract: Always returns 204 for POST, 302 for GET.\nCSRF: Required for POST when CSRF_ENABLED=1 via X-CSRF-Token matching csrf_token cookie.",
        "operationId": "finish_clerk_login_v1_auth_auth_finish_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/auth/auth/clerk/finish": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Clerk Finish",
        "operationId": "clerk_finish_v1_auth_auth_clerk_finish_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Clerk Finish V1 Auth Auth Clerk Finish Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Clerk Finish",
        "operationId": "clerk_finish_v1_auth_auth_clerk_finish_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Clerk Finish V1 Auth Auth Clerk Finish Post"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register V1",
        "description": "Create a local account and return tokens.\n\nMatches frontend expectation for POST /v1/register.\n- Stores credentials in the lightweight auth_users table (auth_password backend)\n- Issues access and refresh tokens\n- Sets HttpOnly cookies via centralized cookie helpers",
        "operationId": "register_v1_v1_auth_register_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "access_token": "jwt",
                    "refresh_token": "jwt"
                  }
                }
              }
            }
          },
          "400": {
            "description": "invalid or username_taken"
          }
        }
      }
    },
    "/v1/auth/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login",
        "description": "Dev login scaffold.\n\nCSRF: Required when CSRF_ENABLED=1 via X-CSRF-Token + csrf_token cookie.",
        "operationId": "login_v1_auth_auth_login_post",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Username for login",
              "title": "Username"
            },
            "description": "Username for login"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "status": "ok",
                    "user_id": "dev"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login V1",
        "description": "Main login endpoint for frontend - accepts JSON payload with username/password.\n\nReturns access_token and refresh_token for header-mode authentication.",
        "operationId": "login_v1_v1_auth_login_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "access_token": "jwt_token",
                    "refresh_token": "refresh_jwt"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout",
        "description": "Logout current session family.\n\nCSRF: Required when CSRF_ENABLED=1 via X-CSRF-Token + csrf_token cookie.",
        "operationId": "logout_v1_auth_auth_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "204": {
            "description": "Logout successful"
          }
        }
      }
    },
    "/v1/auth/auth/logout_all": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout All",
        "description": "Revoke the refresh family for the current session and clear cookies.\n\nBest-effort; returns 204 even if revocation partially fails.",
        "operationId": "logout_all_v1_auth_auth_logout_all_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "204": {
            "description": "Logout all sessions for this family"
          }
        }
      }
    },
    "/v1/auth/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh",
        "description": "Rotate access/refresh cookies.\n\nIntent: When COOKIE_SAMESITE=none, require header X-Auth-Intent: refresh.\nCSRF: Required when CSRF_ENABLED=1 via X-CSRF-Token + csrf_token cookie.",
        "operationId": "refresh_v1_auth_auth_refresh_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "status": "ok",
                    "user_id": "dev"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/auth/token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Issue Token",
        "operationId": "issue_token_v1_auth_auth_token_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "access_token": "<jwt>",
                    "token_type": "bearer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/auth/examples": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Token Examples",
        "description": "Return sanitized JWT examples and common scope sets.\n\nThese are not valid tokens; use /v1/auth/token to mint a real dev token.",
        "operationId": "token_examples_v1_auth_auth_examples_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register",
        "operationId": "register_v1_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Register V1 Register Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/rate-limits/{key}": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get Rate Limit Stats",
        "description": "Get rate limiting statistics for a specific key (admin only).",
        "operationId": "get_rate_limit_stats_v1_admin_rate_limits__key__get",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Auth"
        ],
        "summary": "Clear Rate Limit Data",
        "description": "Clear rate limiting data for a specific key or all keys (admin only).",
        "operationId": "clear_rate_limit_data_v1_admin_rate_limits__key__delete",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login",
        "description": "Password login for local accounts.\n\nCSRF: Required when CSRF_ENABLED=1 via X-CSRF-Token + csrf_token cookie.",
        "operationId": "login_v1_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh",
        "operationId": "refresh_v1_refresh_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshRequest",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/RefreshRequest"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Req"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout",
        "description": "Legacy logout endpoint - delegates to /v1/auth/logout.",
        "operationId": "logout_v1_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/forgot": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Forgot",
        "operationId": "forgot_v1_forgot_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Forgot V1 Forgot Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reset_password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset Password",
        "operationId": "reset_password_v1_reset_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Reset Password V1 Reset Password Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/status/preflight": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Preflight",
        "operationId": "preflight_v1_status_preflight_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Preflight V1 Status Preflight Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/device/session": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get Device Session",
        "operationId": "get_device_session_v1_device_session_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Device Session V1 Device Session Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/device/trust": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Trust Device",
        "description": "Issue a device-trusted session.\n\nIf JWT_SECRET is configured, set an access_token cookie with a long TTL.\nOtherwise, set a lightweight marker cookie so the UI can behave consistently\nin test/dev environments. The silent refresh middleware rotates as needed.",
        "operationId": "trust_device_v1_device_trust_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Trust Device V1 Device Trust Post"
                }
              }
            }
          }
        }
      }
    },
    "/v1/google/auth/login_url": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Google Login Url",
        "description": "Generate a Google OAuth login URL with CSRF protection.\n\nReturns a Google OAuth URL and sets a short-lived state cookie\nfor CSRF protection. If Google OAuth is not configured, returns 503.",
        "operationId": "google_login_url_v1_google_auth_login_url_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/google/auth/callback": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Google Callback",
        "description": "Handle Google OAuth callback with strict state validation.\n\nValidates the signed state parameter and processes the OAuth code.\nRejects requests with missing, expired, or invalid state.\nClears the state cookie after validation and proceeds with session logic.",
        "operationId": "google_callback_v1_google_auth_callback_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/google/google/oauth/callback": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Google Callback Root",
        "operationId": "google_callback_root_v1_google_google_oauth_callback_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/integrations/google/status": {
      "get": {
        "summary": "Integrations Google Status",
        "description": "Canonical Google status endpoint at /v1/integrations/google/status",
        "operationId": "integrations_google_status_v1_integrations_google_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/integrations/google/disconnect": {
      "post": {
        "summary": "Integrations Google Disconnect",
        "description": "Canonical Google disconnect endpoint at /v1/integrations/google/disconnect",
        "operationId": "integrations_google_disconnect_v1_integrations_google_disconnect_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/settings/": {
      "get": {
        "summary": "Get Settings",
        "description": "Get basic settings and configuration information.\n\nThis endpoint provides frontend configuration and status information\nthat the settings page might need.",
        "operationId": "get_settings_v1_settings__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/ha/health": {
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "Ha Health",
        "description": "Lightweight HA connectivity check.\n\nReturns 200 when the HA API responds; 500 on failure.",
        "operationId": "ha_health_v1_ha_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ]
      }
    },
    "/v1/reminders": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "List Reminders",
        "operationId": "list_reminders_v1_reminders_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Calendar"
        ],
        "summary": "Add Reminder",
        "operationId": "add_reminder_v1_reminders_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderCreate",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReminderCreate"
                  }
                ],
                "example": {
                  "text": "Take meds",
                  "when": "2025-01-01T09:00:00Z",
                  "channel": "sms"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Calendar"
        ],
        "summary": "Clear Reminders",
        "operationId": "clear_reminders_v1_reminders_delete",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/profile": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get Profile",
        "operationId": "get_profile_v1_profile_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Update Profile",
        "operationId": "update_profile_v1_profile_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileOk"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      }
    },
    "/v1/onboarding/status": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get Onboarding Status",
        "operationId": "get_onboarding_status_v1_onboarding_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      }
    },
    "/v1/onboarding/complete": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Complete Onboarding",
        "operationId": "complete_onboarding_v1_onboarding_complete_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "status": "success"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      }
    },
    "/v1/admin/ping": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Ping",
        "description": "Enhanced admin ping endpoint using new RBAC system.\n\nThis endpoint demonstrates:\n- require_admin() dependency (accepts any admin scope)\n- get_user_scopes() dependency to access current user scopes\n- Structured response with RBAC information",
        "operationId": "admin_ping_v1_admin_ping_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/v1/admin/rbac/info": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Rbac Info",
        "description": "Get RBAC information for the current user.\n\nThis endpoint demonstrates:\n- require_scope() dependency (requires exact scope)\n- get_user_scopes() to show current permissions\n- Information about available scopes and roles",
        "operationId": "admin_rbac_info_v1_admin_rbac_info_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RbacInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/v1/admin/users/me": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin User Profile",
        "description": "User profile endpoint accessible to any user with profile scope.\n\nThis demonstrates role-based access where different user types\ncan access their own profile information.",
        "operationId": "admin_user_profile_v1_admin_users_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/v1/admin/system/status": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin System Status",
        "description": "System status endpoint for read-only admin access.\n\nThis demonstrates granular admin permissions where users with\nadmin:read can view status but not modify system settings.",
        "operationId": "admin_system_status_v1_admin_system_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/v1/admin/tokens/google": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Tokens Google",
        "description": "Admin view: compact tokens for a given user_id (auth-gated).\n\nReturns a compact list of token rows (valid and invalid) for inspection.",
        "operationId": "admin_tokens_google_v1_admin_tokens_google_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/users/{user_id}/identities": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin User Identities",
        "description": "Return identities for a given user along with last token refresh info.\n\nRequires admin:read scope.",
        "operationId": "admin_user_identities_v1_admin_users__user_id__identities_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/users/{user_id}/identities/{identity_id}/unlink": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Unlink Identity",
        "description": "Unlink an identity from a user with safety guards.\n\nIf unlinking would remove the last usable login method for the user, require `force=true`.",
        "operationId": "admin_unlink_identity_v1_admin_users__user_id__identities__identity_id__unlink_post",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "identity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Identity Id"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "default": false,
              "title": "Force"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/surface/index": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Surface Index",
        "description": "Return a generated index of HTTP (OpenAPI) and WS routes to prevent drift.",
        "operationId": "admin_surface_index_v1_admin_surface_index_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/metrics": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Metrics",
        "operationId": "admin_metrics_v1_admin_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Admin Metrics V1 Admin Metrics Get"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/v1/admin/router/decisions": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Router Decisions",
        "operationId": "admin_router_decisions_v1_admin_router_decisions_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 500,
              "title": "Limit"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Cursor"
            }
          },
          {
            "name": "engine",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by engine (gpt|llama|...)",
              "title": "Engine"
            },
            "description": "Filter by engine (gpt|llama|...)"
          },
          {
            "name": "model",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by model name contains",
              "title": "Model"
            },
            "description": "Filter by model name contains"
          },
          {
            "name": "cache_hit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cache Hit"
            }
          },
          {
            "name": "escalated",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Escalated"
            }
          },
          {
            "name": "intent",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Intent"
            }
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Substring match in route_reason",
              "title": "Q"
            },
            "description": "Substring match in route_reason"
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "ISO timestamp lower bound (inclusive)",
              "title": "Since"
            },
            "description": "ISO timestamp lower bound (inclusive)"
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Admin Router Decisions V1 Admin Router Decisions Get"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/router/decisions.ndjson": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Router Decisions Ndjson",
        "description": "Download last N router decisions as NDJSON (for audit pipelines).",
        "operationId": "admin_router_decisions_ndjson_v1_admin_router_decisions_ndjson_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 500,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/retrieval/last": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Retrieval Last",
        "description": "Return last N retrieval traces (subset of router decisions), most recent first.",
        "operationId": "admin_retrieval_last_v1_admin_retrieval_last_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 2000,
              "minimum": 1,
              "default": 200,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/diagnostics/requests": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Diagnostics Requests",
        "description": "Return last N request IDs with timestamps for quick diagnostics.",
        "operationId": "admin_diagnostics_requests_v1_admin_diagnostics_requests_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Admin Diagnostics Requests V1 Admin Diagnostics Requests Get"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/decisions/explain": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Explain Decision",
        "operationId": "explain_decision_v1_admin_decisions_explain_get",
        "parameters": [
          {
            "name": "req_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Req Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/config": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Config",
        "description": "Get admin configuration - requires admin:read scope",
        "operationId": "admin_config_v1_admin_config_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      },
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Config Post",
        "description": "Minimal admin config POST endpoint for admin-write tests.",
        "operationId": "admin_config_post_v1_admin_config_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Payload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/config/test": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Config Test",
        "description": "Test endpoint for admin write operations - requires admin:write scope",
        "operationId": "admin_config_test_v1_admin_config_test_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/v1/admin/admin/reload_env": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Reload Env",
        "operationId": "admin_reload_env_v1_admin_admin_reload_env_post",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminOkResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {}
              }
            }
          }
        }
      }
    },
    "/v1/admin/errors": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Errors",
        "operationId": "admin_errors_v1_admin_errors_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Admin Errors V1 Admin Errors Get"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/self_review": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Self Review",
        "operationId": "admin_self_review_v1_admin_self_review_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Admin Self Review V1 Admin Self Review Get"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/v1/admin/vector_store/bootstrap": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Vs Bootstrap",
        "operationId": "admin_vs_bootstrap_v1_admin_vector_store_bootstrap_post",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminBootstrapResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/vector_store/migrate": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Vs Migrate",
        "operationId": "admin_vs_migrate_v1_admin_vector_store_migrate_post",
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(inventory|export|migrate)$",
              "default": "migrate",
              "title": "Action"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Dry Run"
            }
          },
          {
            "name": "out_dir",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Out Dir"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStartedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/vector_store/bootstrap/stream": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Vs Bootstrap Stream",
        "description": "SSE stream for Qdrant bootstrap with idempotence.\n\nEmits events: start, step, done, error.",
        "operationId": "admin_vs_bootstrap_stream_v1_admin_vector_store_bootstrap_stream_get",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/vector_store/migrate/stream": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Vs Migrate Stream",
        "description": "SSE stream for Chroma \u2192 Qdrant migration with idempotence.\n\nUses in-process calls for portability; degrades gracefully when deps missing.",
        "operationId": "admin_vs_migrate_stream_v1_admin_vector_store_migrate_stream_get",
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(inventory|export|migrate)$",
              "default": "migrate",
              "title": "Action"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Dry Run"
            }
          },
          {
            "name": "out_dir",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Out Dir"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/vector_store/stats": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Vs Stats",
        "operationId": "admin_vs_stats_v1_admin_vector_store_stats_get",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/token_store/stats": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Token Store Stats",
        "description": "Get token store statistics including Redis availability and local storage usage.",
        "operationId": "admin_token_store_stats_v1_admin_token_store_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/v1/admin/qdrant/collections": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Qdrant Collections",
        "operationId": "admin_qdrant_collections_v1_admin_qdrant_collections_get",
        "parameters": [
          {
            "name": "names",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "CSV of collection names",
              "title": "Names"
            },
            "description": "CSV of collection names"
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/admin/flags": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Flags",
        "description": "Flip runtime flags (process env) \u2014 best-effort.\n\nGuarded by admin token. Note: only affects this process; not persisted.",
        "operationId": "admin_flags_v1_admin_admin_flags_post",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Key"
            }
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Value"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/AdminFlagBody"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Body",
                "$ref": "#/components/schemas/AdminFlagBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminFlagsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/health/router_retrieval": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Health Router Retrieval",
        "description": "Snapshot of router + retrieval config with basic validation and telemetry hints.",
        "operationId": "admin_health_router_retrieval_v1_admin_health_router_retrieval_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/flags": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin List Flags",
        "operationId": "admin_list_flags_v1_admin_flags_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/v1/admin/admin/collections": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "List Collections",
        "operationId": "list_collections_v1_admin_admin_collections_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      }
    },
    "/v1/admin/admin/feature_flags": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Feature Flags",
        "operationId": "feature_flags_v1_admin_admin_feature_flags_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      }
    },
    "/v1/admin/admin/retrieval/trace": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Retrieval Trace",
        "operationId": "retrieval_trace_v1_admin_admin_retrieval_trace_get",
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Q"
            }
          },
          {
            "name": "k",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "default": 5,
              "title": "K"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/tv/config": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Tv Get Config",
        "description": "Mirror of /tv/config (GET) for docs under Admin tag.",
        "operationId": "admin_tv_get_config_v1_admin_tv_config_get",
        "parameters": [
          {
            "name": "resident_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Resident Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TvConfigResponse"
                },
                "example": {
                  "status": "ok",
                  "config": {
                    "ambient_rotation": 45,
                    "rail": "safe",
                    "quiet_hours": {
                      "start": "22:00",
                      "end": "06:00"
                    },
                    "default_vibe": "Calm Night"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Tv Put Config",
        "description": "Mirror of /tv/config (PUT) for docs under Admin tag.",
        "operationId": "admin_tv_put_config_v1_admin_tv_config_put",
        "parameters": [
          {
            "name": "resident_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "me",
              "title": "Resident Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TVConfigUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TvConfigResponse"
                },
                "example": {
                  "status": "ok",
                  "config": {
                    "ambient_rotation": 45,
                    "rail": "safe",
                    "quiet_hours": {
                      "start": "22:00",
                      "end": "06:00"
                    },
                    "default_vibe": "Calm Night"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/admin/ui": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Ui Home",
        "operationId": "admin_ui_home_v1_admin_admin_ui_get",
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/admin/ui/retrieval": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Ui Retrieval",
        "operationId": "admin_ui_retrieval_v1_admin_admin_ui_retrieval_get",
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/admin/ui/config": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Ui Config",
        "operationId": "admin_ui_config_v1_admin_admin_ui_config_get",
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/me": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Me",
        "operationId": "me_v1_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Me V1 Me Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sessions": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Sessions",
        "operationId": "sessions_v1_sessions_get",
        "parameters": [
          {
            "name": "legacy",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return legacy wrapped shape when 1 (deprecated; TODO remove by 2026-01-31)",
              "title": "Legacy"
            },
            "description": "Return legacy wrapped shape when 1 (deprecated; TODO remove by 2026-01-31)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": true
                    }
                  ],
                  "title": "Response Sessions V1 Sessions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sessions/paginated": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Sessions Paginated",
        "operationId": "sessions_paginated_v1_sessions_paginated_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Sessions Paginated V1 Sessions Paginated Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sessions/{sid}/revoke": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Revoke Session",
        "operationId": "revoke_session_v1_sessions__sid__revoke_post",
        "parameters": [
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Sid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Revoke Session V1 Sessions  Sid  Revoke Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/devices/pair/start": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Pair Start",
        "operationId": "pair_start_v1_devices_pair_start_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Pair Start V1 Devices Pair Start Post"
                }
              }
            }
          }
        }
      }
    },
    "/v1/devices/pair/complete": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Pair Complete",
        "operationId": "pair_complete_v1_devices_pair_complete_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Pair Complete V1 Devices Pair Complete Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/devices/{device_id}/revoke": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Device Revoke",
        "operationId": "device_revoke_v1_devices__device_id__revoke_post",
        "parameters": [
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Device Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Device Revoke V1 Devices  Device Id  Revoke Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/spotify/token-for-sdk": {
      "get": {
        "tags": [
          "Music"
        ],
        "summary": "Token For Sdk",
        "operationId": "token_for_sdk_v1_spotify_token_for_sdk_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/spotify/debug": {
      "get": {
        "summary": "Spotify Debug",
        "description": "Debug endpoint to test authentication.",
        "operationId": "spotify_debug_v1_spotify_debug_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/spotify/debug/store": {
      "get": {
        "summary": "Debug Oauth Store",
        "description": "Debug endpoint to check OAuth store contents.",
        "operationId": "debug_oauth_store_v1_spotify_debug_store_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/spotify/test/store_tx": {
      "post": {
        "summary": "Test Store Tx",
        "description": "Test endpoint to store a transaction for testing.",
        "operationId": "test_store_tx_v1_spotify_test_store_tx_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/spotify/test/full_flow": {
      "post": {
        "summary": "Test Full Flow",
        "description": "Test endpoint that stores a transaction and returns the JWT state.",
        "operationId": "test_full_flow_v1_spotify_test_full_flow_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/spotify/connect": {
      "get": {
        "summary": "Spotify Connect",
        "description": "Initiate Spotify OAuth flow with stateless PKCE.\n\nThis route creates a JWT state containing user_id + tx_id, and stores\nthe PKCE code_verifier server-side keyed by tx_id. No cookies required.\n\nReturns the authorization URL as JSON for frontend consumption.",
        "operationId": "spotify_connect_v1_spotify_connect_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/spotify/callback-test": {
      "get": {
        "summary": "Spotify Callback Test",
        "description": "Simple test callback.",
        "operationId": "spotify_callback_test_v1_spotify_callback_test_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/spotify/health": {
      "get": {
        "summary": "Spotify Health",
        "description": "Lightweight health check to confirm router mount and env wiring.\n\nReturns basic config flags without exposing secrets.",
        "operationId": "spotify_health_v1_spotify_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/spotify/debug-cookie": {
      "get": {
        "summary": "Spotify Debug Cookie",
        "description": "Dev-only helper (stubbed in production).",
        "operationId": "spotify_debug_cookie_v1_spotify_debug_cookie_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Spotify Debug Cookie V1 Spotify Debug Cookie Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/spotify/callback": {
      "get": {
        "summary": "Spotify Callback",
        "description": "Handle Spotify OAuth callback with stateless JWT state.\n\nRecovers user_id + PKCE code_verifier from JWT state + server store.\nNo cookies required - works even if browser sends zero cookies.",
        "operationId": "spotify_callback_v1_spotify_callback_get",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Code"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "State"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/spotify/disconnect": {
      "delete": {
        "summary": "Spotify Disconnect",
        "description": "Disconnect Spotify by marking tokens as invalid.",
        "operationId": "spotify_disconnect_v1_spotify_disconnect_delete",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Spotify Disconnect V1 Spotify Disconnect Delete"
                }
              }
            }
          }
        }
      }
    },
    "/v1/spotify/status": {
      "get": {
        "summary": "Spotify Status",
        "description": "Get Spotify integration status.\n\nReturns a richer shape to avoid dead route usage on the frontend:\n{ connected: bool, devices_ok: bool, state_ok: bool, reason?: string }",
        "operationId": "spotify_status_v1_spotify_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Spotify Status V1 Spotify Status Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/spotify/devices": {
      "get": {
        "tags": [
          "Music"
        ],
        "summary": "Devices",
        "operationId": "devices_v1_spotify_devices_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/spotify/play": {
      "post": {
        "tags": [
          "Music"
        ],
        "summary": "Play",
        "description": "Proxy play request to Spotify.\n\nBody shape: { \"uris\"?: [], \"context_uri\"?: \"\", \"device_id\"?: \"\" }",
        "operationId": "play_v1_spotify_play_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/status": {
      "get": {
        "summary": "Integrations Status",
        "operationId": "integrations_status_v1_integrations_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/_selftest": {
      "get": {
        "summary": "Selftest",
        "operationId": "selftest_v1__selftest_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/models": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "List Models",
        "operationId": "list_models_v1_models_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response List Models V1 Models Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      }
    },
    "/v1/history/recent": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Recent History",
        "operationId": "recent_history_v1_history_recent_get",
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/history/pin": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Pin Interaction",
        "description": "Pin an interaction by hash into the pinned store (requires 'pin' scope when scopes enforced).",
        "operationId": "pin_interaction_v1_history_pin_post",
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          },
          {
            "name": "hash_value",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Hash Value"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "status": "pinned"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/status/features": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Features",
        "operationId": "features_v1_status_features_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      }
    },
    "/v1/status/vector_store": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Status Vector Store",
        "operationId": "status_vector_store_v1_status_vector_store_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Status Vector Store V1 Status Vector Store Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      }
    },
    "/v1/admin/backup": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Backup",
        "description": "Create an encrypted backup archive of data files.\n\nUses AES-256 encryption via `openssl enc` with a key provided by BACKUP_KEY.\nFiles included: data/*.json, stories/*.jsonl, sessions archive tarballs.\nOutput path controlled by BACKUP_DIR.",
        "operationId": "admin_backup_v1_admin_backup_post",
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rag/search": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Rag Search",
        "operationId": "rag_search_v1_rag_search_get",
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "title": "Q"
            }
          },
          {
            "name": "k",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "default": 5,
              "title": "K"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/skills/list": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Skills List",
        "operationId": "skills_list_v1_skills_list_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin:write"
            ]
          }
        ]
      }
    },
    "/v1/tv/photos": {
      "get": {
        "tags": [
          "TV"
        ],
        "summary": "List Photos",
        "operationId": "list_photos_v1_tv_photos_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/tv/photos/favorite": {
      "post": {
        "tags": [
          "TV"
        ],
        "summary": "Mark Favorite",
        "operationId": "mark_favorite_v1_tv_photos_favorite_post",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": true
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TvPhotoOkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tv/weather": {
      "get": {
        "tags": [
          "TV"
        ],
        "summary": "Tv Weather",
        "description": "Return a minimal weather payload.\n\nIn production, wire to a weather provider; here we rely on environment overrides\nfor deterministic output during tests/dev.",
        "operationId": "tv_weather_v1_tv_weather_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/tv/alert": {
      "post": {
        "tags": [
          "TV"
        ],
        "summary": "Tv Alert",
        "description": "Escalation hook from TV to caregiver channel.\n\nThis is a thin wrapper; in V1.1 we can fan-out to SMS/voice/webhook.",
        "operationId": "tv_alert_v1_tv_alert_post",
        "parameters": [
          {
            "name": "kind",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "help",
              "title": "Kind"
            }
          },
          {
            "name": "note",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TvOkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tv/tips": {
      "get": {
        "tags": [
          "TV"
        ],
        "summary": "Tv Ambient Tips",
        "description": "Ambient tips via lightweight local RAG-style mashup.\n\nExample: \"It's 72\u00b0F and cloudy; lo-fi playlist queued.\"",
        "operationId": "tv_ambient_tips_v1_tv_tips_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/tv/music/play": {
      "post": {
        "tags": [
          "TV"
        ],
        "summary": "Tv Music Play",
        "description": "Start playing a local preset playlist (placeholder).",
        "operationId": "tv_music_play_v1_tv_music_play_post",
        "parameters": [
          {
            "name": "preset",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Preset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TvOkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tv/prefs": {
      "get": {
        "tags": [
          "TV"
        ],
        "summary": "Tv Get Prefs",
        "operationId": "tv_get_prefs_v1_tv_prefs_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TV"
        ],
        "summary": "Tv Set Prefs",
        "operationId": "tv_set_prefs_v1_tv_prefs_post",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          {
            "name": "speech_rate",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Speech Rate"
            }
          },
          {
            "name": "input_mode",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Input Mode"
            }
          },
          {
            "name": "font_scale",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Font Scale"
            }
          },
          {
            "name": "wake_word_enabled",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Wake Word Enabled"
            }
          },
          {
            "name": "address_style",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Address Style"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TvOkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "speech_rate": {
                    "type": "string"
                  },
                  "input_mode": {
                    "type": "string"
                  },
                  "font_scale": {
                    "type": "string"
                  },
                  "wake_word_enabled": {
                    "type": "boolean"
                  },
                  "address_style": {
                    "type": "string"
                  }
                },
                "example": {
                  "name": "Ava",
                  "speech_rate": "normal"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tv/stage2": {
      "post": {
        "tags": [
          "TV"
        ],
        "summary": "Tv Stage2",
        "operationId": "tv_stage2_v1_tv_stage2_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Stage2Body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TvOkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tv/config": {
      "get": {
        "tags": [
          "TV"
        ],
        "summary": "Tv Get Config",
        "operationId": "tv_get_config_v1_tv_config_get",
        "parameters": [
          {
            "name": "resident_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Resident Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TvConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TV"
        ],
        "summary": "Tv Put Config",
        "operationId": "tv_put_config_v1_tv_config_put",
        "parameters": [
          {
            "name": "resident_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "me",
              "title": "Resident Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TVConfigUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TvConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tts/speak": {
      "post": {
        "tags": [
          "Music"
        ],
        "summary": "Speak",
        "operationId": "speak_v1_tts_speak_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TTSRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TTS audio generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TTSAck"
                }
              },
              "audio/wav": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "PCM WAV audio stream"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/care/contacts": {
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Create Contact Api",
        "operationId": "create_contact_api_v1_care_contacts_post",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactBody",
                "example": {
                  "resident_id": "r1",
                  "name": "Leola",
                  "phone": "+15551234567",
                  "priority": 10,
                  "quiet_hours": {
                    "start": "22:00",
                    "end": "06:00"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactCreateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "List Contacts Api",
        "operationId": "list_contacts_api_v1_care_contacts_get",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "parameters": [
          {
            "name": "resident_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Resident Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/care/contacts/{contact_id}": {
      "patch": {
        "tags": [
          "Care"
        ],
        "summary": "Update Contact Api",
        "operationId": "update_contact_api_v1_care_contacts__contact_id__patch",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Contact Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactUpdateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Care"
        ],
        "summary": "Delete Contact Api",
        "operationId": "delete_contact_api_v1_care_contacts__contact_id__delete",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Contact Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactUpdateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tv/contacts": {
      "get": {
        "tags": [
          "Care",
          "TV"
        ],
        "summary": "List Tv Contacts",
        "operationId": "list_tv_contacts_v1_tv_contacts_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ]
      }
    },
    "/v1/tv/contacts/call": {
      "post": {
        "tags": [
          "Care",
          "TV"
        ],
        "summary": "Start Call",
        "operationId": "start_call_v1_tv_contacts_call_post",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": true
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactUpdateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/care/ack_token": {
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "Create Ack Token",
        "operationId": "create_ack_token_v1_care_ack_token_get",
        "parameters": [
          {
            "name": "alert_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Alert Id"
            }
          },
          {
            "name": "ttl_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 300,
              "title": "Ttl Seconds"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Create Ack Token V1 Care Ack Token Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/care/alerts/ack_via_link": {
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Ack Via Link",
        "operationId": "ack_via_link_v1_care_alerts_ack_via_link_post",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AckViaLinkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/calendar/today": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "List Today",
        "operationId": "list_today_v1_calendar_today_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsResponse"
                },
                "example": {
                  "items": [
                    {
                      "date": "2025-08-12",
                      "time": "09:30",
                      "title": "Doctor appointment",
                      "location": "Clinic"
                    },
                    {
                      "date": "2025-08-12",
                      "time": "13:00",
                      "title": "Lunch with Sam",
                      "location": "Cafe"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/calendar/next": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Next Three",
        "operationId": "next_three_v1_calendar_next_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsResponse"
                },
                "example": {
                  "items": [
                    {
                      "date": "2025-08-12",
                      "time": "09:30",
                      "title": "Doctor appointment"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/calendar/list": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "List All",
        "operationId": "list_all_v1_calendar_list_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsResponse"
                },
                "example": {
                  "items": [
                    {
                      "date": "2025-08-12",
                      "time": "09:30",
                      "title": "Doctor appointment"
                    },
                    {
                      "date": "2025-08-13",
                      "time": "10:00",
                      "title": "Grocery pickup"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/voices/catalog": {
      "get": {
        "tags": [
          "Music"
        ],
        "summary": "Catalog",
        "operationId": "catalog_v1_voices_catalog_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Catalog V1 Voices Catalog Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/memory/ingest": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Ingest Memory",
        "description": "Accept a file upload or URL and ingest into Qdrant as Markdown chunks.",
        "operationId": "ingest_memory_v1_memory_ingest_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_ingest_memory_v1_memory_ingest_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ask": {
      "post": {
        "tags": [
          "Care"
        ],
        "summary": " Ask",
        "description": "Internal ask function that accepts resolved user_id parameter.",
        "operationId": "_ask_ask_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AskRequest",
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "status": "ok"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "example": "hello world"
                }
              },
              "text/event-stream": {
                "schema": {
                  "example": "data: hello\n\n"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ask": {
      "post": {
        "summary": " Compat V1 Ask",
        "operationId": "_compat_v1_ask_v1_ask_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/care/alerts": {
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Create Alert",
        "operationId": "create_alert_v1_care_alerts_post",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertCreate",
                "example": {
                  "resident_id": "r1",
                  "kind": "help",
                  "severity": "critical",
                  "note": "Grandma pressed the help button"
                }
              },
              "example": {
                "resident_id": "r1",
                "kind": "help",
                "severity": "critical",
                "note": "Grandma pressed the help button"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertRecord"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/problem+json": {
                "example": {
                  "type": "about:blank",
                  "title": "Too Many Requests",
                  "status": 429,
                  "detail": {
                    "error": "rate_limited",
                    "retry_after": 29
                  },
                  "instance": "/v1/care/alerts",
                  "retry_after": 29
                }
              }
            },
            "description": "Too Many Requests"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "List Alerts",
        "operationId": "list_alerts_v1_care_alerts_get",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "parameters": [
          {
            "name": "resident_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Resident Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/care/alerts/{alert_id}/ack": {
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Ack Alert",
        "operationId": "ack_alert_v1_care_alerts__alert_id__ack_post",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "parameters": [
          {
            "name": "alert_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Alert Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/AckBody"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Body",
                "example": {
                  "by": "cg1"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertRecord"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/care/alerts/{alert_id}/resolve": {
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Resolve Alert",
        "operationId": "resolve_alert_v1_care_alerts__alert_id__resolve_post",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "parameters": [
          {
            "name": "alert_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Alert Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertRecord"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/care/devices/{device_id}/heartbeat": {
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Heartbeat",
        "operationId": "heartbeat_v1_care_devices__device_id__heartbeat_post",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "parameters": [
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Device Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Heartbeat"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/care/device_status": {
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "Device Status",
        "operationId": "device_status_v1_care_device_status_get",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "parameters": [
          {
            "name": "device_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Device Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Device Status V1 Care Device Status Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/care/sessions": {
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Create Care Session",
        "operationId": "create_care_session_v1_care_sessions_post",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "List Care Sessions",
        "operationId": "list_care_sessions_v1_care_sessions_get",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "parameters": [
          {
            "name": "resident_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Resident Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/care/sessions/{session_id}": {
      "patch": {
        "tags": [
          "Care"
        ],
        "summary": "Patch Care Session",
        "operationId": "patch_care_session_v1_care_sessions__session_id__patch",
        "security": [
          {
            "OAuth2": [
              "care:resident"
            ]
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/care": {
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "Websocket Http Handler",
        "operationId": "websocket_http_handler_v1_ws_care_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Care"
        ],
        "summary": "Websocket Http Handler",
        "operationId": "websocket_http_handler_v1_ws_care_put",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Websocket Http Handler",
        "operationId": "websocket_http_handler_v1_ws_care_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Care"
        ],
        "summary": "Websocket Http Handler",
        "operationId": "websocket_http_handler_v1_ws_care_delete",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Care"
        ],
        "summary": "Websocket Http Handler",
        "operationId": "websocket_http_handler_v1_ws_care_patch",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/ws/care/docs": {
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "Ws Care Docs",
        "description": "WebSocket entry point documentation.\n\nConnect to ``/v1/ws/care`` and send a JSON message to subscribe to a topic.\nExample payload: ``{\"action\": \"subscribe\", \"topic\": \"resident:r1\"}``.",
        "operationId": "ws_care_docs_v1_ws_care_docs_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WSTopicsInfo"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{path}": {
      "delete": {
        "tags": [
          "Care"
        ],
        "summary": "Websocket Http Handler",
        "operationId": "websocket_http_handler_v1_ws__path__delete",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Care"
        ],
        "summary": "Websocket Http Handler",
        "operationId": "websocket_http_handler_v1_ws__path__patch",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Care"
        ],
        "summary": "Websocket Http Handler",
        "operationId": "websocket_http_handler_v1_ws__path__put",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Care"
        ],
        "summary": "Websocket Http Handler",
        "operationId": "websocket_http_handler_v1_ws__path__post",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Care"
        ],
        "summary": "Websocket Http Handler",
        "operationId": "websocket_http_handler_v1_ws__path__get",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/caregiver/sessions": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "List Sessions",
        "operationId": "list_sessions_v1_caregiver_sessions_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response List Sessions V1 Caregiver Sessions Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "care:caregiver"
            ]
          }
        ]
      }
    },
    "/v1/caregiver/device_status": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Device Status",
        "operationId": "device_status_v1_caregiver_device_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Device Status V1 Caregiver Device Status Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "care:caregiver"
            ]
          }
        ]
      }
    },
    "/v1/caregiver/alert": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Raise Alert",
        "operationId": "raise_alert_v1_caregiver_alert_post",
        "security": [
          {
            "OAuth2": [
              "care:caregiver"
            ]
          }
        ],
        "parameters": [
          {
            "name": "kind",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "help",
              "title": "Kind"
            }
          },
          {
            "name": "note",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Raise Alert V1 Caregiver Alert Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/music": {
      "post": {
        "tags": [
          "Music"
        ],
        "summary": "Music Command",
        "operationId": "music_command_v1_music_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MusicCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vibe": {
      "post": {
        "tags": [
          "Music"
        ],
        "summary": "Set Vibe",
        "operationId": "set_vibe_v1_vibe_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VibeBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/app__api__music_http__VibeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/music/restore": {
      "post": {
        "tags": [
          "Music"
        ],
        "summary": "Restore Volume",
        "operationId": "restore_volume_v1_music_restore_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/state": {
      "get": {
        "tags": [
          "Music"
        ],
        "summary": "Music State",
        "operationId": "music_state_v1_state_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/queue": {
      "get": {
        "tags": [
          "Music"
        ],
        "summary": "Get Queue",
        "operationId": "get_queue_v1_queue_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/recommendations": {
      "get": {
        "tags": [
          "Music"
        ],
        "summary": "Recommendations",
        "operationId": "recommendations_v1_recommendations_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/music/devices": {
      "get": {
        "tags": [
          "Music"
        ],
        "summary": "List Devices",
        "operationId": "list_devices_v1_music_devices_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/music/device": {
      "post": {
        "tags": [
          "Music"
        ],
        "summary": "Transfer Playback Device",
        "operationId": "transfer_playback_device_v1_music_device_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/restore_volume": {
      "post": {
        "tags": [
          "Music"
        ],
        "summary": "Restore Volume",
        "operationId": "restore_volume_v1_restore_volume_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/music": {
      "get": {
        "tags": [
          "Music"
        ],
        "summary": "Websocket Http Handler",
        "operationId": "websocket_http_handler_v1_ws_music_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Music"
        ],
        "summary": "Websocket Http Handler",
        "operationId": "websocket_http_handler_v1_ws_music_put",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Music"
        ],
        "summary": "Websocket Http Handler",
        "operationId": "websocket_http_handler_v1_ws_music_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Music"
        ],
        "summary": "Websocket Http Handler",
        "operationId": "websocket_http_handler_v1_ws_music_delete",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Music"
        ],
        "summary": "Websocket Http Handler",
        "operationId": "websocket_http_handler_v1_ws_music_patch",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/ui/duck": {
      "post": {
        "tags": [
          "TV"
        ],
        "summary": "Ui Duck",
        "operationId": "ui_duck_v1_ui_duck_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DuckBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ui/restore": {
      "post": {
        "tags": [
          "TV"
        ],
        "summary": "Ui Restore",
        "operationId": "ui_restore_v1_ui_restore_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          }
        }
      }
    },
    "/google/oauth/callback": {
      "get": {
        "summary": " Legacy Google Oauth Callback Root",
        "operationId": "_legacy_google_oauth_callback_root_google_oauth_callback_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AckBody": {
        "properties": {
          "by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "By"
          }
        },
        "type": "object",
        "title": "AckBody",
        "example": {
          "by": "caregiver_123"
        }
      },
      "AckViaLinkResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "resident_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resident Id"
          },
          "kind": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Kind"
          },
          "severity": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Severity"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "AckViaLinkResponse",
        "example": {
          "id": "a_01HXYZ",
          "kind": "help",
          "resident_id": "r1",
          "severity": "critical",
          "status": "acknowledged"
        }
      },
      "AdminBootstrapResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "collection": {
            "type": "string",
            "title": "Collection"
          },
          "existed": {
            "type": "string",
            "title": "Existed"
          }
        },
        "type": "object",
        "required": [
          "status",
          "collection",
          "existed"
        ],
        "title": "AdminBootstrapResponse",
        "example": {
          "collection": "kb:default",
          "existed": "False",
          "status": "ok"
        }
      },
      "AdminFlagBody": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "value": {
            "type": "string",
            "title": "Value"
          }
        },
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "title": "AdminFlagBody",
        "example": {
          "key": "RETRIEVAL_PIPELINE",
          "value": "dual"
        }
      },
      "AdminFlagsResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "default": "ok"
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "value": {
            "type": "string",
            "title": "Value"
          },
          "flags": {
            "additionalProperties": true,
            "type": "object",
            "title": "Flags"
          }
        },
        "type": "object",
        "required": [
          "key",
          "value",
          "flags"
        ],
        "title": "AdminFlagsResponse",
        "example": {
          "flags": {
            "RETRIEVAL_PIPELINE": "dual"
          },
          "key": "RETRIEVAL_PIPELINE",
          "status": "ok",
          "value": "dual"
        }
      },
      "AdminOkResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "default": "ok"
          }
        },
        "type": "object",
        "title": "AdminOkResponse",
        "example": {
          "status": "ok"
        }
      },
      "AdminStartedResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "action": {
            "type": "string",
            "title": "Action"
          },
          "dry_run": {
            "type": "boolean",
            "title": "Dry Run"
          },
          "out_dir": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Out Dir"
          }
        },
        "type": "object",
        "required": [
          "status",
          "action",
          "dry_run"
        ],
        "title": "AdminStartedResponse",
        "example": {
          "action": "migrate",
          "dry_run": true,
          "out_dir": "/tmp/out",
          "status": "started"
        }
      },
      "AdminStatusResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "default": "ok"
          },
          "area": {
            "type": "string",
            "title": "Area",
            "default": "admin"
          },
          "rbac_version": {
            "type": "string",
            "title": "Rbac Version",
            "default": "2.0"
          },
          "authenticated": {
            "type": "boolean",
            "title": "Authenticated"
          },
          "user_scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "User Scopes"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          }
        },
        "type": "object",
        "required": [
          "authenticated",
          "user_scopes"
        ],
        "title": "AdminStatusResponse",
        "example": {
          "area": "admin",
          "authenticated": true,
          "rbac_version": "2.0",
          "status": "ok",
          "user_id": "user123",
          "user_scopes": [
            "admin",
            "admin:write",
            "admin:read"
          ]
        }
      },
      "AlertCreate": {
        "properties": {
          "resident_id": {
            "type": "string",
            "title": "Resident Id"
          },
          "kind": {
            "type": "string",
            "title": "Kind"
          },
          "severity": {
            "type": "string",
            "title": "Severity",
            "default": "info"
          },
          "note": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Note"
          }
        },
        "type": "object",
        "required": [
          "resident_id",
          "kind"
        ],
        "title": "AlertCreate",
        "example": {
          "kind": "help",
          "note": "Grandma pressed the help button",
          "resident_id": "r1",
          "severity": "critical"
        }
      },
      "AlertRecord": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "resident_id": {
            "type": "string",
            "title": "Resident Id"
          },
          "kind": {
            "type": "string",
            "title": "Kind"
          },
          "severity": {
            "type": "string",
            "title": "Severity"
          },
          "note": {
            "type": "string",
            "title": "Note"
          },
          "created_at": {
            "type": "number",
            "title": "Created At"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "ack_at": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ack At"
          },
          "resolved_at": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolved At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "resident_id",
          "kind",
          "severity",
          "note",
          "created_at",
          "status"
        ],
        "title": "AlertRecord",
        "example": {
          "created_at": 1736467200.0,
          "id": "a01",
          "kind": "help",
          "note": "Grandma pressed the help button",
          "resident_id": "r1",
          "severity": "critical",
          "status": "open"
        }
      },
      "AliasBody": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "entity_id": {
            "type": "string",
            "title": "Entity Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "entity_id"
        ],
        "title": "AliasBody",
        "example": {
          "entity_id": "light.kitchen",
          "name": "kitchen light"
        }
      },
      "AskRequest": {
        "properties": {
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              }
            ],
            "title": "Prompt"
          },
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model"
          },
          "stream": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream",
            "description": "Force SSE when true; otherwise negotiated via Accept",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "prompt"
        ],
        "title": "AskRequest",
        "example": {
          "prompt": "hello"
        }
      },
      "BackupResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "default": "ok"
          },
          "path": {
            "type": "string",
            "title": "Path"
          }
        },
        "type": "object",
        "required": [
          "path"
        ],
        "title": "BackupResponse",
        "example": {
          "path": "/app/backups/backup.tar.gz.enc",
          "status": "ok"
        }
      },
      "Body_capture_save_v1_capture_save_post": {
        "properties": {
          "session_id": {
            "type": "string",
            "title": "Session Id"
          },
          "audio": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Audio"
          },
          "video": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Video"
          },
          "transcript": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Transcript"
          },
          "tags": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "session_id"
        ],
        "title": "Body_capture_save_v1_capture_save_post"
      },
      "Body_capture_tags_v1_capture_tags_post": {
        "properties": {
          "session_id": {
            "type": "string",
            "title": "Session Id"
          }
        },
        "type": "object",
        "required": [
          "session_id"
        ],
        "title": "Body_capture_tags_v1_capture_tags_post"
      },
      "Body_ingest_memory_v1_memory_ingest_post": {
        "properties": {
          "file": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "File"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source"
          }
        },
        "type": "object",
        "title": "Body_ingest_memory_v1_memory_ingest_post"
      },
      "ContactBody": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "resident_id": {
            "type": "string",
            "title": "Resident Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "priority": {
            "type": "integer",
            "title": "Priority",
            "default": 0
          },
          "quiet_hours": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quiet Hours"
          }
        },
        "type": "object",
        "required": [
          "resident_id",
          "name"
        ],
        "title": "ContactBody",
        "example": {
          "name": "Leola",
          "phone": "+15551234567",
          "priority": 10,
          "quiet_hours": {
            "end": "06:00",
            "start": "22:00"
          },
          "resident_id": "r1"
        }
      },
      "ContactCreateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "default": "ok"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "ContactCreateResponse",
        "example": {
          "id": "c_01HXYZABCD",
          "status": "ok"
        }
      },
      "ContactUpdateResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "default": "ok"
          }
        },
        "type": "object",
        "title": "ContactUpdateResponse",
        "example": {
          "status": "ok"
        }
      },
      "DeviceBody": {
        "properties": {
          "device_id": {
            "type": "string",
            "title": "Device Id"
          }
        },
        "type": "object",
        "required": [
          "device_id"
        ],
        "title": "DeviceBody",
        "example": {
          "device_id": "abcdef123"
        }
      },
      "DuckBody": {
        "properties": {
          "level": {
            "type": "integer",
            "title": "Level",
            "default": 15
          }
        },
        "type": "object",
        "title": "DuckBody",
        "example": {
          "level": 15
        }
      },
      "Event": {
        "properties": {
          "date": {
            "type": "string",
            "title": "Date"
          },
          "time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          }
        },
        "type": "object",
        "required": [
          "date"
        ],
        "title": "Event",
        "example": {
          "date": "2025-08-12",
          "description": "Annual checkup",
          "location": "Clinic",
          "time": "09:30",
          "title": "Doctor appointment"
        }
      },
      "EventsResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Event"
            },
            "type": "array",
            "title": "Items"
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "EventsResponse",
        "example": {
          "items": [
            {
              "date": "2025-08-12",
              "description": "Annual checkup",
              "location": "Clinic",
              "time": "09:30",
              "title": "Doctor appointment"
            }
          ]
        }
      },
      "ForgotRequest": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          }
        },
        "type": "object",
        "required": [
          "username"
        ],
        "title": "ForgotRequest",
        "example": {
          "username": "demo"
        }
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Heartbeat": {
        "properties": {
          "device_id": {
            "type": "string",
            "title": "Device Id"
          },
          "resident_id": {
            "type": "string",
            "title": "Resident Id"
          },
          "battery_pct": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Battery Pct"
          }
        },
        "type": "object",
        "required": [
          "device_id",
          "resident_id"
        ],
        "title": "Heartbeat",
        "example": {
          "battery_pct": 92,
          "device_id": "dev-abc",
          "resident_id": "r1"
        }
      },
      "IngestResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "doc_hash": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Doc Hash"
          },
          "chunk_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chunk Count"
          },
          "ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ids"
          },
          "headings": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Headings"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "IngestResponse"
      },
      "LoginRequest": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "LoginRequest",
        "example": {
          "password": "secret123",
          "username": "demo"
        }
      },
      "MusicCommand": {
        "properties": {
          "command": {
            "type": "string",
            "title": "Command",
            "description": "play|pause|next|previous|volume"
          },
          "volume": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Volume"
          },
          "device_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Device Id"
          },
          "temporary": {
            "type": "boolean",
            "title": "Temporary",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "command"
        ],
        "title": "MusicCommand",
        "example": {
          "command": "volume",
          "temporary": true,
          "volume": 20
        }
      },
      "OkResponse": {
        "properties": {
          "ok": {
            "type": "boolean",
            "title": "Ok",
            "default": true
          },
          "status": {
            "type": "string",
            "title": "Status",
            "default": "ok"
          }
        },
        "type": "object",
        "title": "OkResponse",
        "example": {
          "ok": true,
          "status": "ok"
        }
      },
      "ProfileOk": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "default": "success"
          }
        },
        "type": "object",
        "title": "ProfileOk",
        "example": {
          "status": "success"
        }
      },
      "QuietHours": {
        "properties": {
          "start": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\d{2}:\\d{2}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start"
          },
          "end": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\d{2}:\\d{2}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "End"
          }
        },
        "type": "object",
        "title": "QuietHours",
        "example": {
          "end": "06:00",
          "start": "22:00"
        }
      },
      "RbacInfoResponse": {
        "properties": {
          "scopes_available": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Scopes Available"
          },
          "roles_available": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Roles Available"
          },
          "user_scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "User Scopes"
          },
          "effective_permissions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Effective Permissions"
          }
        },
        "type": "object",
        "required": [
          "scopes_available",
          "roles_available",
          "user_scopes",
          "effective_permissions"
        ],
        "title": "RbacInfoResponse",
        "example": {
          "effective_permissions": [
            "system_management",
            "user_management",
            "metrics_access"
          ],
          "roles_available": {
            "admin": [
              "admin",
              "admin:write",
              "admin:read"
            ],
            "caregiver": [
              "care:caregiver",
              "user:profile"
            ]
          },
          "scopes_available": {
            "admin": "Full administrative access",
            "admin:read": "Administrative read operations",
            "admin:write": "Administrative write operations"
          },
          "user_scopes": [
            "admin",
            "admin:write"
          ]
        }
      },
      "RefreshRequest": {
        "properties": {
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token"
          }
        },
        "type": "object",
        "required": [
          "refresh_token"
        ],
        "title": "RefreshRequest",
        "example": {
          "refresh_token": "<jwt-refresh>"
        }
      },
      "RegisterRequest": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "RegisterRequest",
        "example": {
          "password": "secret123",
          "username": "demo"
        }
      },
      "ReminderCreate": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "when": {
            "type": "string",
            "title": "When"
          },
          "channel": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Channel"
          }
        },
        "type": "object",
        "required": [
          "text",
          "when"
        ],
        "title": "ReminderCreate",
        "example": {
          "channel": "sms",
          "text": "Take meds",
          "when": "2025-01-01T09:00:00Z"
        }
      },
      "ResetPasswordRequest": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "new_password": {
            "type": "string",
            "title": "New Password"
          }
        },
        "type": "object",
        "required": [
          "token",
          "new_password"
        ],
        "title": "ResetPasswordRequest",
        "example": {
          "new_password": "NewPass123",
          "token": "abcd1234"
        }
      },
      "ServiceAck": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "default": "ok"
          }
        },
        "type": "object",
        "title": "ServiceAck",
        "example": {
          "status": "ok"
        }
      },
      "ServiceRequest": {
        "properties": {
          "domain": {
            "type": "string",
            "title": "Domain"
          },
          "service": {
            "type": "string",
            "title": "Service"
          },
          "data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "domain",
          "service"
        ],
        "title": "ServiceRequest",
        "example": {
          "data": {
            "entity_id": "light.kitchen"
          },
          "domain": "light",
          "service": "turn_on"
        }
      },
      "SessionBody": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "resident_id": {
            "type": "string",
            "title": "Resident Id"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "transcript_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Transcript Uri"
          }
        },
        "type": "object",
        "required": [
          "id",
          "resident_id"
        ],
        "title": "SessionBody",
        "example": {
          "id": "s_01HABCDEF",
          "resident_id": "r1",
          "title": "Morning check-in",
          "transcript_uri": "s3://bucket/transcripts/s_01HABCDEF.txt"
        }
      },
      "Stage2Body": {
        "properties": {
          "tiles": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tiles"
          },
          "rhythm": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rhythm"
          },
          "helpfulness": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Helpfulness"
          }
        },
        "type": "object",
        "title": "Stage2Body",
        "example": {
          "helpfulness": "high",
          "rhythm": "morning",
          "tiles": [
            "calendar",
            "music"
          ]
        }
      },
      "StateResponse": {
        "properties": {
          "vibe": {
            "additionalProperties": true,
            "type": "object",
            "title": "Vibe"
          },
          "volume": {
            "type": "integer",
            "title": "Volume"
          },
          "device_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Device Id"
          },
          "progress_ms": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Progress Ms"
          },
          "is_playing": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Playing"
          },
          "track": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Track"
          },
          "quiet_hours": {
            "type": "boolean",
            "title": "Quiet Hours"
          },
          "explicit_allowed": {
            "type": "boolean",
            "title": "Explicit Allowed"
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider"
          },
          "radio_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Radio Url"
          },
          "radio_playing": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Radio Playing"
          }
        },
        "type": "object",
        "required": [
          "vibe",
          "volume",
          "device_id",
          "quiet_hours",
          "explicit_allowed"
        ],
        "title": "StateResponse"
      },
      "TTSAck": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "default": "ok"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "TTS request accepted"
          }
        },
        "type": "object",
        "title": "TTSAck",
        "example": {
          "message": "TTS request accepted",
          "status": "ok"
        }
      },
      "TTSRequest": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "mode": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mode",
            "default": "utility"
          },
          "intent": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Intent"
          },
          "sensitive": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sensitive"
          },
          "voice": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Voice"
          }
        },
        "type": "object",
        "required": [
          "text"
        ],
        "title": "TTSRequest",
        "example": {
          "intent": "notify",
          "mode": "utility",
          "sensitive": false,
          "text": "Hello there!",
          "voice": "alloy"
        }
      },
      "TVConfigUpdate": {
        "properties": {
          "ambient_rotation": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ambient Rotation"
          },
          "rail": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rail"
          },
          "quiet_hours": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/QuietHours"
              },
              {
                "type": "null"
              }
            ]
          },
          "default_vibe": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Vibe"
          }
        },
        "type": "object",
        "title": "TVConfigUpdate",
        "example": {
          "ambient_rotation": 15,
          "default_vibe": "Calm Night",
          "rail": "admin"
        }
      },
      "TokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          },
          "token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token"
          },
          "stats": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stats"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "refresh_token"
        ],
        "title": "TokenResponse"
      },
      "TransferBody": {
        "properties": {
          "device_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Device Id"
          }
        },
        "type": "object",
        "title": "TransferBody"
      },
      "TvConfig": {
        "properties": {
          "ambient_rotation": {
            "type": "integer",
            "title": "Ambient Rotation",
            "default": 30
          },
          "rail": {
            "type": "string",
            "enum": [
              "safe",
              "admin",
              "open"
            ],
            "title": "Rail",
            "default": "safe"
          },
          "quiet_hours": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/QuietHours"
              },
              {
                "type": "null"
              }
            ]
          },
          "default_vibe": {
            "type": "string",
            "title": "Default Vibe",
            "default": "Calm Night"
          }
        },
        "type": "object",
        "title": "TvConfig",
        "example": {
          "ambient_rotation": 45,
          "default_vibe": "Calm Night",
          "quiet_hours": {
            "end": "06:00",
            "start": "22:00"
          },
          "rail": "safe"
        }
      },
      "TvConfigResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "default": "ok"
          },
          "config": {
            "$ref": "#/components/schemas/TvConfig"
          }
        },
        "type": "object",
        "required": [
          "config"
        ],
        "title": "TvConfigResponse",
        "example": {
          "config": {
            "ambient_rotation": 45,
            "default_vibe": "Calm Night",
            "quiet_hours": {
              "end": "06:00",
              "start": "22:00"
            },
            "rail": "safe"
          },
          "status": "ok"
        }
      },
      "TvOkResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "default": "ok"
          }
        },
        "type": "object",
        "title": "TvOkResponse",
        "example": {
          "status": "ok"
        }
      },
      "TvPhotoOkResponse": {
        "properties": {
          "ok": {
            "type": "boolean",
            "title": "Ok",
            "default": true
          },
          "status": {
            "type": "string",
            "title": "Status",
            "default": "ok"
          }
        },
        "type": "object",
        "title": "OkResponse",
        "example": {
          "ok": true,
          "status": "ok"
        }
      },
      "UserProfile": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "timezone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timezone"
          },
          "language": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Language"
          },
          "communication_style": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Communication Style"
          },
          "interests": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Interests"
          },
          "occupation": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Occupation"
          },
          "home_location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Home Location"
          },
          "preferred_model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferred Model"
          },
          "notification_preferences": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notification Preferences"
          },
          "calendar_integration": {
            "type": "boolean",
            "title": "Calendar Integration",
            "default": false
          },
          "gmail_integration": {
            "type": "boolean",
            "title": "Gmail Integration",
            "default": false
          },
          "onboarding_completed": {
            "type": "boolean",
            "title": "Onboarding Completed",
            "default": false
          }
        },
        "type": "object",
        "title": "UserProfile",
        "example": {
          "calendar_integration": true,
          "email": "ava@example.com",
          "gmail_integration": false,
          "language": "en",
          "name": "Ava",
          "notification_preferences": {
            "sms": true
          },
          "preferred_model": "gpt-4o-mini",
          "timezone": "America/Los_Angeles"
        }
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VibeBody": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "energy": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Energy"
          },
          "tempo": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tempo"
          },
          "explicit": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Explicit"
          }
        },
        "type": "object",
        "title": "VibeBody",
        "example": {
          "energy": 0.3,
          "explicit": false,
          "name": "Calm Night",
          "tempo": 85
        }
      },
      "WSSubscribeExample": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action",
            "default": "subscribe"
          },
          "topic": {
            "type": "string",
            "title": "Topic",
            "default": "resident:r1"
          }
        },
        "type": "object",
        "title": "WSSubscribeExample",
        "example": {
          "action": "subscribe",
          "topic": "resident:r1"
        }
      },
      "WSTopicsInfo": {
        "properties": {
          "subscribe_example": {
            "$ref": "#/components/schemas/WSSubscribeExample",
            "default": {
              "action": "subscribe",
              "topic": "resident:r1"
            }
          },
          "topics": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Topics",
            "default": [
              "resident:{resident_id}"
            ]
          },
          "events_example": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Events Example",
            "default": [
              "device.heartbeat",
              "alert.created",
              "alert.acknowledged",
              "alert.resolved",
              "tv.config.updated"
            ]
          }
        },
        "type": "object",
        "title": "WSTopicsInfo",
        "example": {
          "events_example": [
            "device.heartbeat",
            "alert.created",
            "alert.acknowledged",
            "alert.resolved",
            "tv.config.updated"
          ],
          "subscribe_example": {
            "action": "subscribe",
            "topic": "resident:r1"
          },
          "topics": [
            "resident:{resident_id}"
          ]
        }
      },
      "WebhookAck": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "default": "ok"
          }
        },
        "type": "object",
        "title": "WebhookAck"
      },
      "app__api__music__VibeResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "default": "ok"
          },
          "vibe": {
            "additionalProperties": true,
            "type": "object",
            "title": "Vibe"
          }
        },
        "type": "object",
        "required": [
          "vibe"
        ],
        "title": "VibeResponse",
        "example": {
          "status": "ok",
          "vibe": {
            "energy": 0.3,
            "explicit": false,
            "name": "Calm Night",
            "tempo": 85
          }
        }
      },
      "app__api__music_http__VibeResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "default": "ok"
          },
          "vibe": {
            "additionalProperties": true,
            "type": "object",
            "title": "Vibe"
          }
        },
        "type": "object",
        "required": [
          "vibe"
        ],
        "title": "VibeResponse"
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {
              "care:resident": "Resident-level care features (presence, sessions, HA actions)",
              "care:caregiver": "Caregiver portal and actions",
              "music:control": "Control music playback and devices",
              "admin:write": "Administrative endpoints: flags, metrics, backups"
            },
            "tokenUrl": "/v1/auth/token"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Care",
      "description": "Care features, contacts, sessions, and Home Assistant actions."
    },
    {
      "name": "Music",
      "description": "Music playback, voices, and TTS."
    },
    {
      "name": "Calendar",
      "description": "Calendar and reminders."
    },
    {
      "name": "TV",
      "description": "TV UI and related endpoints."
    },
    {
      "name": "Admin",
      "description": "Admin, status, models, diagnostics, and tools."
    },
    {
      "name": "Auth",
      "description": "Authentication and authorization."
    }
  ],
  "servers": [
    {
      "url": "http://localhost:8000"
    }
  ]
}