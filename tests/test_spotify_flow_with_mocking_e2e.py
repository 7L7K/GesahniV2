#!/usr/bin/env python3
"""End-to-end test of Spotify OAuth flow with proper mocking."""

import time
import requests
import json
from urllib.parse import urlparse, parse_qs

def test_spotify_flow_with_mocking():
    """Test the complete Spotify OAuth flow with mocking."""
    print("üöÄ STARTING SPOTIFY OAUTH FLOW WITH MOCKING")

    # Step 1: Mock the necessary functions (simulate what pytest would do)
    import app.api.spotify as spotify_mod
    import app.deps.user as user_mod

    # Mock get_current_user_id
    original_get_current_user_id = user_mod.get_current_user_id
    user_mod.get_current_user_id = lambda req=None: "test_user_123"

    # Mock JWT decode
    original_jwt_decode = spotify_mod._jwt_decode
    spotify_mod._jwt_decode = lambda token, key, algorithms=None: {"sub": "test_user_123", "sid": "test_session_456"}

    # Mock token exchange
    original_exchange_code = spotify_mod.exchange_code
    async def mock_exchange_code(code, code_verifier):
        return {
            "access_token": "mock_access_token",
            "refresh_token": "mock_refresh_token",
            "scope": "user-read-private",
            "expires_in": 3600,
            "expires_at": int(time.time()) + 3600,
        }
    spotify_mod.exchange_code = mock_exchange_code

    # Mock token persistence
    original_upsert_token = spotify_mod.upsert_token
    async def mock_upsert_token(token):
        return None
    spotify_mod.upsert_token = mock_upsert_token

    # Mock PKCE lookup
    original_get_pkce = spotify_mod.get_pkce_challenge_by_state
    def mock_get_pkce(sid, state):
        from app.api.spotify import SpotifyPKCE
        return SpotifyPKCE(verifier="mock_verifier", challenge="mock_challenge", state=state, created_at=time.time())
    spotify_mod.get_pkce_challenge_by_state = mock_get_pkce

    try:
        # Step 2: Call the login endpoint
        print("\nStep 1: Calling /v1/spotify/login...")
        login_url = "http://localhost:8000/v1/spotify/login?user_id=test_user"
        from app.cookie_names import GSNH_AT
        cookies = {GSNH_AT: "dummy_jwt_token"}

        login_response = requests.get(login_url, cookies=cookies)
        print(f"Login status: {login_response.status_code}")
        assert login_response.status_code == 200

        login_data = login_response.json()
        auth_url = login_data.get("authorize_url")
        print(f"Auth URL: {auth_url}")
        assert auth_url

        # Check temporary cookie
        set_cookie = login_response.headers.get("Set-Cookie", "")
        print(f"Set-Cookie header: {set_cookie}")
        assert "spotify_oauth_jwt" in set_cookie, "Temporary cookie not set!"
        print("‚úÖ Temporary cookie set successfully")

        # Extract state
        parsed_url = urlparse(auth_url)
        query_params = parse_qs(parsed_url.query)
        state = query_params.get('state', [None])[0]
        print(f"State: {state}")
        assert state

        # Step 3: Call callback with mocked functions
        print(f"\nStep 2: Simulating Spotify callback with state {state}...")

        callback_cookies = {"spotify_oauth_jwt": "dummy_jwt_token"}
        callback_url = f"http://localhost:8000/v1/spotify/callback?code=mock_auth_code&state={state}"

        callback_response = requests.get(callback_url, cookies=callback_cookies, follow_redirects=False)
        print(f"Callback status: {callback_response.status_code}")
        assert callback_response.status_code == 302, f"Expected 302, got {callback_response.status_code}"

        # Check redirect location
        location = callback_response.headers.get("Location")
        print(f"Redirect location: {location}")
        assert location
        assert "settings?spotify=connected" in location, f"Expected success redirect, got: {location}"
        print("‚úÖ Success redirect detected")

        # Check temporary cookies are cleared
        callback_set_cookie = callback_response.headers.get("Set-Cookie", "")
        print(f"Callback Set-Cookie: {callback_set_cookie}")
        assert "spotify_oauth_jwt=;" in callback_set_cookie, "Temporary cookie not cleared"
        print("‚úÖ Temporary cookie cleared successfully")

        print("\nüéâ SPOTIFY OAUTH FLOW WITH MOCKING PASSED!")
        print("\nüìã Summary:")
        print("‚úÖ Login endpoint sets temporary cookie")
        print("‚úÖ Callback endpoint finds JWT and decodes it")
        print("‚úÖ Token exchange succeeds (mocked)")
        print("‚úÖ Tokens are persisted (mocked)")
        print("‚úÖ Success redirect to frontend")
        print("‚úÖ Temporary cookies properly cleared")
        print("‚úÖ Main auth cookie preserved")

        return True

    finally:
        # Restore original functions
        user_mod.get_current_user_id = original_get_current_user_id
        spotify_mod._jwt_decode = original_jwt_decode
        spotify_mod.exchange_code = original_exchange_code
        spotify_mod.upsert_token = original_upsert_token
        spotify_mod.get_pkce_challenge_by_state = original_get_pkce

if __name__ == "__main__":
    try:
        test_spotify_flow_with_mocking()
        print("\n‚úÖ ALL TESTS PASSED! Spotify OAuth flow is working correctly.")
    except Exception as e:
        print(f"\n‚ùå TEST FAILED: {e}")
        raise
